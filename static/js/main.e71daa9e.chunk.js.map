{"version":3,"sources":["components/PokemonsCarousel.js","Store.js","components/PokemonsTypesSelect.js","components/PokemonsSearchBox.js","components/PokemonsPagination.js","components/PokemonCard.js","components/PokemonsCardDeck.js","components/App.js","serviceWorker.js","index.js"],"names":["PokemonsCarousel","observer","props","className","autoplay","dots","data","map","item","index","key","src","avatarUrl","alt","Store","getTypes","a","fetch","responce","json","types","results","slice","length","getNames","names","push","value","name","setPokemon","pokemon","id","height","weight","type","abilities","ability","stats","stat","base_stat","getPokemons","limit","offset","indicator","loading","pokemonsCount","pokemons","url","responceForEach","pokemonData","getPokemonByName","toLowerCase","page","pageSize","status","swal","getPokemonsByTypes","filter","pokemonsJSONObject","JSON","stringify","Set","parse","storedData","getSlicedPokemonsByTypes","paginationHandleChange","this","decorate","observable","action","store","storeContext","createContext","Option","Select","PokemonsTypesSelect","useContext","mode","placeholder","onChange","Search","Input","PokemonsSearchBox","options","filterOption","inputValue","option","toUpperCase","indexOf","allowClear","onSearch","PokemonsPagination","pageSizeOptions","showSizeChanger","showQuickJumper","showLessItems","current","total","showTotal","range","setTypeTagColor","getTotalEVs","PokemonCard","title","bordered","avatar","color","scale","alias","forceFit","showTitle","crosshairs","visible","textStyle","fontSize","fontColor","label","position","toFixed","PokemonsCardDeck","justify","width","App","align","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e71daa9e.chunk.js","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport './scss/PokemonsCarousel.css';\nimport { Carousel } from 'antd';\nimport { observer } from 'mobx-react';\n\nconst PokemonsCarousel = observer((props) => {\n  return (\n    <div className=\"carousel\" >\n      <Carousel autoplay dots={false}>\n        {props.data.map((item, index) =>\n          <img key={index} className=\"carousel__image\" src={item.avatarUrl} alt=\"pokemon avatar\" />\n        )}\n      </Carousel>\n    </div>\n  );\n});\n\nexport default PokemonsCarousel;","import swal from 'sweetalert';\nimport { observable, action, decorate, toJS } from 'mobx';\nimport { createContext } from 'react';\n\nclass Store {\n  constructor() {\n    this.pokemonsCount = 964;\n    this.pokemons = [];\n    this.types = [];\n    this.page = 1;\n    this.pageSize = 10;\n    this.loading = false;\n    this.names = [];\n\n    this.indicator = 'getPokemons';\n    this.storedData = [];\n\n    this.getTypes();\n    this.getNames();\n    this.getPokemons(this.pageSize, this.page * this.pageSize - this.pageSize);\n  };\n\n  getTypes = async () => {\n    const responce = await fetch('https://pokeapi.co/api/v2/type');\n    const data = await responce.json();\n    this.types = data.results.slice(0, data.results.length - 2);\n  };\n\n  getNames = async () => {\n    const responce = await fetch('https://pokeapi.co/api/v2/pokemon?offset=0&limit=964');\n    const data = await responce.json();\n    let names = [];\n    for (const item of data.results) {\n      names.push({ value: item.name });\n    }\n    this.names = names;\n  };\n\n  setPokemon = (data) => {\n    let pokemon = {};\n    pokemon.id = data.id;\n    pokemon.name = data.name;\n    pokemon.avatarUrl = `./pokemonAvatars/${data.name}.png`;\n    pokemon.height = data.height;\n    pokemon.weight = data.weight;\n    pokemon.types = [];\n    for (const item of data.types) {\n      for (const type of this.types) {\n        if (item.type.name === type.name) {\n          pokemon.types.push({ name: item.type.name });\n          break;\n        }\n      }\n    }\n    pokemon.abilities = [];\n    for (const item of data.abilities) {\n      pokemon.abilities.push({ name: item.ability.name });\n    }\n    pokemon.stats = [];\n    for (const item of data.stats) {\n      pokemon.stats.push({ name: item.stat.name, base_stat: item.base_stat });\n    }\n    return pokemon;\n  };\n\n  getPokemons = async (limit, offset) => {\n    this.indicator = 'getPokemons';\n    this.loading = true;\n    const responce = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=${limit}&offset=${offset}`);\n    const data = await responce.json();\n    this.pokemonsCount = 964;\n    let pokemons = [];\n    for (const item of data.results) {\n      const responceForEach = await fetch(`${item.url}`);\n      const pokemonData = await responceForEach.json();\n      pokemons.push(this.setPokemon(pokemonData));\n    }\n    this.loading = false;\n    this.pokemons = pokemons;\n  };\n\n  getPokemonByName = async (name) => {\n    name = name.toLowerCase();\n    this.page = 1;\n    if (name === '') {\n      return this.getPokemons(this.pageSize, this.page * this.pageSize - this.pageSize);\n    }\n    this.loading = true;\n    const responce = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`);\n    if (responce.status === 404) {\n      swal('Ooops!', 'No pokemon matched your search :( Try again!', 'error');\n      return this.getPokemons(this.pageSize, this.page * this.pageSize - this.pageSize);\n    } else {\n      const data = await responce.json();\n      this.loading = false;\n      this.pokemons = [this.setPokemon(data)];\n      this.pokemonsCount = this.pokemons.length;\n    }\n  };\n\n  getPokemonsByTypes = async (types) => {\n    this.indicator = 'getPokemonsByTypes';\n    this.page = 1;\n    if (types.length === 0) {\n      return this.getPokemons(this.pageSize, this.page * this.pageSize - this.pageSize);\n    }\n    this.loading = true;\n    let pokemons = [];\n    for (const type of types) {\n      const responce = await fetch(`https://pokeapi.co/api/v2/type/${type}`);\n      const data = await responce.json();\n      for (const item of data.pokemon) {\n        const responceForEach = await fetch(`https://pokeapi.co/api/v2/pokemon/${item.pokemon.name}`);\n        const pokemonData = await responceForEach.json();\n        pokemons.push(this.setPokemon(pokemonData));\n      }\n    }\n    pokemons = pokemons.filter(item => item.id <= 964);\n    const pokemonsJSONObject = pokemons.map(JSON.stringify);\n    pokemons = [...new Set(pokemonsJSONObject)].map(JSON.parse);\n    this.loading = false;\n    this.storedData = pokemons;\n    this.pokemons = pokemons.slice(this.page * this.pageSize - this.pageSize, this.page * this.pageSize);\n    this.pokemonsCount = this.storedData.length;\n  };\n\n  getSlicedPokemonsByTypes = (page, pageSize) => {\n    this.pokemons = this.storedData.slice(page * pageSize - pageSize, page * pageSize);\n  };\n\n  paginationHandleChange = (page, pageSize) => {\n    this.page = page;\n    this.pageSize = pageSize;\n    switch (this.indicator) {\n      case 'getPokemons':\n        this.getPokemons(pageSize, page * pageSize - pageSize);\n        break;\n      case 'getPokemonsByTypes':\n        this.getSlicedPokemonsByTypes(page, pageSize);\n        break;\n    };\n  };\n};\n\ndecorate(Store, {\n  pokemonsCount: observable,\n  pokemons: observable,\n  page: observable,\n  pageSize: observable,\n  loading: observable,\n  indicator: observable,\n  storedData: observable,\n  getPokemons: action,\n  getPokemonByName: action,\n  getPokemonsByTypes: action,\n  getSlicedPokemonsByTypes: action,\n  paginationHandleChange: action\n});\n\nconst store = new Store();\nexport const storeContext = createContext(store);","import React, { useContext } from 'react';\nimport 'antd/dist/antd.css';\nimport './scss/PokemonsTypesSelect.css';\nimport { Select } from 'antd';\nconst { Option } = Select;\nimport { storeContext } from '../Store.js';\nimport { observer } from 'mobx-react';\nimport { toJS } from 'mobx';\n\nconst PokemonsTypesSelect = observer((props) => {\n  const store = useContext(storeContext);\n\n  return (\n    <div className=\"select\">\n      <Select\n        className=\"select__component\"\n        mode=\"multiple\"\n        placeholder=\"Search pokemon by type\"\n        onChange={store.getPokemonsByTypes}>\n        {props.types.map(item =>\n          <Option className=\"select__option\" key={item.name}>{item.name}</Option>)}\n      </Select>\n    </div >\n  );\n});\n\nexport default PokemonsTypesSelect;","import React, { useContext } from 'react';\nimport 'antd/dist/antd.css';\nimport './scss/PokemonsSearchBox.css';\nimport { Input } from 'antd';\nconst { Search } = Input;\nimport { AutoComplete } from 'antd';\nimport { storeContext } from '../Store.js';\nimport { observer } from 'mobx-react';\nimport { toJS } from 'mobx';\n\nconst PokemonsSearchBox = observer((props) => {\n  const store = useContext(storeContext);\n\n  return (\n    <div className=\"searchbox\">\n      <AutoComplete\n        className=\"searchbox__search\"\n        options={props.names}\n        filterOption={(inputValue, option) =>\n          option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1}\n      >\n        <Search\n          type=\"text\"\n          allowClear=\"true\"\n          placeholder=\"Search pokemon by name\"\n          onSearch={store.getPokemonByName} />\n      </AutoComplete>\n    </div>);\n});\n\nexport default PokemonsSearchBox;","import React, { useContext } from 'react';\nimport 'antd/dist/antd.css';\nimport './scss/PokemonsPagination.css';\nimport { Pagination } from 'antd';\nimport { storeContext } from '../Store.js';\nimport { observer } from 'mobx-react';\n\nconst PokemonsPagination = observer((props) => {\n  const store = useContext(storeContext);\n\n  return (\n    <div className=\"pagination\">\n      <Pagination\n        className=\"pagination__component\"\n        pageSizeOptions={['10', '20', '50']}\n        showSizeChanger\n        showQuickJumper\n        showLessItems={true}\n        current={props.page}\n        onChange={store.paginationHandleChange}\n        total={props.total}\n        showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`} />\n    </div>);\n});\n\nexport default PokemonsPagination;","import React from 'react';\nimport 'antd/dist/antd.css';\nimport './scss/PokemonCard.css';\nimport { Card, Tag } from 'antd';\nimport { Chart, Axis, Legend, Tooltip, Geom } from 'bizcharts';\nimport { observer } from 'mobx-react';\nimport { toJS } from 'mobx';\n\nconst setTypeTagColor = (item) => {\n  switch (item.name) {\n    case 'normal':\n      return 'geekblue';\n    case 'fighting':\n      return 'volcano';\n    case 'flying':\n      return 'blue';\n    case 'poison':\n      return 'magenta';\n    case 'ground':\n      return 'gold';\n    case 'rock':\n      return 'orange';\n    case 'bug':\n      return 'green';\n    case 'ghost':\n      return 'purple';\n    case 'steel':\n      return 'geekblue';\n    case 'fire':\n      return 'volcano';\n    case 'water':\n      return 'blue';\n    case 'grass':\n      return 'green';\n    case 'electric':\n      return 'gold';\n    case 'psychic':\n      return 'magenta';\n    case 'ice':\n      return 'cyan';\n    case 'dragon':\n      return 'red';\n    case 'dark':\n      return 'purple';\n    case 'fairy':\n      return 'magenta';\n  };\n};\n\nconst getTotalEVs = (stats) => {\n  let total = 0;\n  for (let item of stats) {\n    total += item.base_stat;\n  }\n  return total;\n};\n\nconst getAverage = (stats) => {\n  return (getTotalEVs(stats) / stats.length).toFixed(2);\n};\n\nconst PokemonCard = observer((props) => {\n\n  // For Chart\n  const scale = {\n    base_stat: { alias: 'Effort values' },\n    name: { alias: 'Stats' }\n  };\n\n  const title = {\n    textStyle: {\n      fontSize: '14',\n      fontColor: '#000000'\n    }\n  };\n\n  const label = {\n    textStyle: {\n      fontSize: '13',\n      fontColor: '#000000'\n    }\n  };\n\n  return (\n    <Card className=\"card\" title={props.name} bordered={true}>\n      <img className=\"card__image card-div\" src={props.avatar} alt=\"card image\" />\n      <span className=\"card__title\">Types</span>\n      <div className=\"card-div\">\n        {props.types.map((item, index) =>\n          <Tag key={index} className=\"card__type\" color={setTypeTagColor(item)}>{item.name}\n          </Tag>\n        )}\n      </div>\n      <span className=\"card__title\">Abilities</span>\n      <div className=\"card-div\">\n        <ul className=\"card__abilities\">\n          {props.abilities.map((item, index) =>\n            <li key={index}>{item.name}</li>\n          )}\n        </ul>\n      </div>\n      <div className=\"card-height-weight\">\n        <div className=\"card__height\">\n          <span className=\"card__title\">Height</span>\n          <Tag color=\"magenta\">{props.height}\n          </Tag>\n        </div>\n        <div className=\"card__weight\">\n          <span className=\"card__title\">Weight</span>\n          <Tag color=\"purple\">{props.weight}\n          </Tag>\n        </div>\n      </div>\n      <span className=\"card__title\">Stats</span>\n      <div className=\"card-div card__stats\">\n        <Chart height={200} data={props.stats} scale={scale} forceFit>\n          <Tooltip showTitle={false} crosshairs={{ type: 'rect' }} />\n          <Legend visible={false} />\n          <Axis title={title} name=\"base_stat\" label={label} />\n          <Axis name=\"name\" label={0} visible={false} />\n          <Geom type=\"interval\" position=\"name*base_stat\"\n            color={['name', ['#ff0000', '#ff8c00', '#ffd700', '#1e90ff', '#00fa9a', '#ff69b4']]} />\n        </Chart>\n      </div>\n      <div className=\"card-total-average\">\n        <div className=\"card__total\">\n          <span className=\"card__title\">Total EVs</span>\n          <Tag color=\"magenta\">{getTotalEVs(props.stats)}\n          </Tag>\n        </div>\n        <div className=\"card__average\">\n          <span className=\"card__title\">Average</span>\n          <Tag color=\"purple\">{getAverage(props.stats)}\n          </Tag>\n        </div>\n      </div>\n    </Card >\n  );\n});\n\nexport default PokemonCard;","import React from 'react';\nimport 'antd/dist/antd.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport './scss/PokemonsCardDeck.css';\nimport { Row } from 'antd';\nimport Loader from 'react-loader-spinner';\nimport PokemonCard from './PokemonCard.js';\nimport { observer } from 'mobx-react';\nimport { toJS } from 'mobx';\n\nconst PokemonsCardDeck = observer((props) => {\n  return (\n    <Row className=\"card-deck\" justify=\"center\">\n      {props.loading ?\n        <Loader className=\"loader\"\n          type=\"Oval\"\n          color=\"gold\"\n          height={80}\n          width={80}\n        /> :\n        props.data.map((item, index) =>\n          <PokemonCard key={index} name={item.name.toUpperCase()} avatar={item.avatarUrl}\n            types={item.types} abilities={item.abilities} height={item.height}\n            weight={item.weight} stats={item.stats} />\n        )}\n    </Row>\n  );\n});\n\nexport default PokemonsCardDeck;","import React, { useContext } from 'react';\nimport 'antd/dist/antd.css';\nimport './scss/App.css';\nimport PokemonsCarousel from './PokemonsCarousel.js';\nimport PokemonsTypesSelect from './PokemonsTypesSelect.js';\nimport PokemonsSearchBox from './PokemonsSearchBox.js';\nimport PokemonsPagination from './PokemonsPagination.js';\nimport PokemonsCardDeck from './PokemonsCardDeck.js';\nimport { storeContext } from '../Store.js';\nimport { observer } from 'mobx-react';\nimport { toJS } from 'mobx';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nconst App = observer((props) => {\n  const store = useContext(storeContext);\n\n  return (\n    <div className=\"layout\">\n      <div className=\"header\">\n        <div className=\"logo\">\n          <span className=\"logo__title\">Poke&#769;dex\n            <img className=\"logo__image logo__image_animated\" align=\"middle\" src=\"./logo.png\" alt=\"logo image\" />\n          </span>\n        </div>\n      </div>\n      <div className=\"content\">\n        <PokemonsCarousel data={store.pokemons} />\n        <div className=\"select-searchbox\">\n          <PokemonsTypesSelect types={store.types} />\n          <PokemonsSearchBox names={store.names} />\n        </div>\n        <PokemonsPagination page={store.page} total={store.pokemonsCount} indicator={store.indicator} />\n        <PokemonsCardDeck data={store.pokemons} loading={store.loading} />\n      </div>\n      <div className=\"footer\">\n        <span className=\"footer__text\">Connect with us</span>\n        <div className=\"footer-icons\">\n          <a className=\"footer__facebook-link\" href=\"https://www.facebook.com/Pokemon/\" target=\"_blank\">\n            <i className=\"fab fa-facebook-square footer__icon\"></i>\n          </a>\n          <a className=\"footer__youtube-link\" href=\"https://www.youtube.com/user/pokemon\" target=\"_blank\">\n            <i className=\"fab fa-youtube-square footer__icon\"></i>\n          </a>               <a className=\"footer__twitter-link\" href=\"https://twitter.com/pokemon\" target=\"_blank\">\n            <i className=\"fab fa-twitter-square footer__icon\"></i>\n          </a>\n          <a className=\"footer__instagram-link\" href=\"https://www.instagram.com/pokemon/\" target=\"_blank\">\n            <i className=\"fab fa-instagram footer__icon\"></i>\n          </a>\n          <a className=\"footer__tumblr-link\" href=\"https://pokemon.tumblr.com/\" target=\"_blank\">\n            <i className=\"fab fa-tumblr-square footer__icon\"></i>\n          </a>\n        </div>\n        <span className=\"footer__note\">An open-source site created by Sokolova with help from <a className=\"footer__pokeapi-link\"\n          href=\"https://pokeapi.co/\"\n          target=\"_blank\">Pokéapi</a></span>\n      </div>\n    </div>\n  );\n});\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}